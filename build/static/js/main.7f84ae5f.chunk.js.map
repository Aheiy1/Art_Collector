{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","result","console","error","Feature","featuredResult","id","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","toLowerCase","map","person","displayname","image","src","alt","Loading","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","results","log","disabled","prev","next","record","index","key","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","classifications","catch","onSubmit","htmlFor","type","placeholder","onChange","e","target","length","name","list","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f84ae5f.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=61cb0c82-5e46-4b48-a948-c790f5ee8da5';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  // console.log(\"hello\")\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n// console.log(data,\"data\")\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from \"react\";\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\n\nconst Searchable = (props) => {\n  const { searchTerm, searchValue, setIsLoading, setSearchResults } = props;\n  return (\n    <span className=\"content\">\n      <a\n        href={searchValue}\n        onClick={async (event) => {\n          event.preventDefault();\n          setIsLoading(true);\n          try {\n            const result = await fetchQueryResultsFromTermAndValue(\n              searchTerm,\n              searchValue\n            );\n            setSearchResults(result);\n          } catch (error) {\n            console.error(error);\n          } finally {\n            setIsLoading(false);\n          }\n        }}\n      >\n        SOME SEARCH TERM\n      </a>\n    </span>\n  );\n  /**\n   * We need a new component called Searchable which:\n   *\n   * Has a template like this:\n   *\n   * <span className=\"content\">\n   *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n   * </span>\n   *\n   * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n   *\n   * When someone clicks the anchor tag, you should:\n   *\n   * - preventDefault on the event\n   * - call setIsLoading, set it to true\n   *\n   * Then start a try/catch/finally block:\n   *\n   * try:\n   *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n   *  - send the result to setSearchResults (which will update the Preview component)\n   * catch:\n   *  - console.error the error\n   * finally:\n   *  - call setIsLoading, set it to false\n   */\n};\nconst Feature = ({ featuredResult, setIsLoading, setSearchResults }) => {\n  if (!featuredResult) {\n    return <main id=\"feature\"></main>;\n  }\n  const {\n    title,\n    dated,\n    images,\n    primaryimageurl,\n    description,\n    culture,\n    style,\n    technique,\n    medium,\n    dimensions,\n    people,\n    department,\n    division,\n    contact,\n    creditline,\n  } = featuredResult;\n  return (\n    <main id=\"feature\">\n      <div className=\"object-feature\">\n        <header>\n          <h3>OBJECT TITLE</h3>\n          <h4>WHEN IT IS DATED</h4>\n        </header>\n        <section className=\"facts\">\n          <span className=\"title\">culture</span>\n          <Searchable searchTerm='culture' searchValue={culture} setIsLoading={setIsLoading} setSearchResults={setSearchResults}  />\n          \n          <span className=\"title\">technique</span>\n          <Searchable searchTerm='technique' searchValue={technique} setIsLoading={setIsLoading} setSearchResults={setSearchResults}  />\n          \n          <span className=\"title\">medium</span>\n          <Searchable searchTerm='medium' searchValue={medium.toLowerCase} setIsLoading={setIsLoading} setSearchResults={setSearchResults}  />\n          \n          <span className=\"title\">culture</span>\n          <Searchable searchTerm='culture' searchValue={culture} setIsLoading={setIsLoading} setSearchResults={setSearchResults}  />\n          \n          {people.map((person) => { return( \n           <Fragment>\n          <span className=\"title\">people</span>\n          <Searchable searchTerm=\"person\" searchValue={person.displayname} setIsLoading={setIsLoading} setSearchResults={setSearchResults}  />\n          </Fragment>\n          )})}\n          <Fragment>\n          <span className=\"title\">{dimensions}</span>\n          </Fragment>\n          \n          <span className=\"title\">{title}</span>\n\n         <span className=\"dated\">{dated}</span>\n         \n         <span className=\"style\">{style}</span>\n         \n         <span className=\"department\">{department}</span>\n         \n         <span className=\"description\">{description}</span>\n         \n         <span className=\"division\">{division}</span>\n         \n         <span className=\"contact\">{contact}</span>\n         \n         <span className=\"creditline\">{creditline}</span>\n        \n        </section>\n        <section className=\"photos\">\n          {images.map((image) => { return ( <img src= {primaryimageurl} alt={image.id} />  )})}\n        </section>\n\n      </div>\n    </main>\n  );\n};\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n//  */\n\nexport default Feature;\n","import React from \"react\";\n\nconst Loading = () => {\n  return (\n    <div id=\"loading\">\n      <h2 className=\"message\">Searching...</h2>*\n    </div>\n  );\n};\n\nexport default Loading;\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n *\n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n","import React from \"react\";\nimport { fetchQueryResultsFromURL } from \"../api\";\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n *\n */\n\nconst Preview = (props) => {\n  const { setSearchResults, setFeaturedResult, setIsLoading } = props;\n  const { info, records } = props.searchResults;\n  console.log(records, \"record\")\n\n  /**\n   *\n   *\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   *\n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n\n  /**\n   * Don't touch this function, it's good to go.\n   *\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <aside id=\"preview\">\n      <header className=\"pagination\">\n        {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n        <button\n          disabled={!info.prev ? true : false}\n          className=\"previous\"\n          onClick={() => fetchPage(info.prev)}\n        >\n          Previous\n        </button>\n        {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n        <button\n          disabled={!info.next ? true : false}\n          className=\"next\"\n          onClick={() => fetchPage(info.next)}\n        >\n          Next\n        </button>\n      </header>\n      <section className=\"results\">\n        {records.map((record, index) => {\n          console.log(record, \"record\")\n          return (\n          <div\n            key={index}\n            className=\"object-preview\"\n            onClick={(event) => {\n              event.preventDefault();\n              setFeaturedResult(record);\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            {\n              record.primaryimageurl ? (\n                <img src={record.primaryimageurl} alt={record.description} />\n              ) : null\n\n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing\n            }\n            {\n              record.title ? <h3>{record.title}</h3> : <h3>{record.title}</h3>\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n        )})}\n      </section>\n    </aside>\n  );\n};\n\nexport default Preview;\n","import React, { useEffect, useState } from \"react\";\n\n/**\n * Don't touch these imports!\n */\nimport {\n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults,\n} from \"../api\";\n\nconst Search = (props) => {\n  const { setIsLoading, setSearchResults } = props;\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState(\"\");\n  const [century, setCentury] = useState(\"any\");\n  const [classification, setClassification] = useState(\"any\");\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   *\n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   *\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   *\n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\n      .then(function ([centuries, classifications]) {\n        // console.log(centuries, classifications, \"new log)\")\n        setCenturyList(centuries);\n        setClassificationList(classifications);\n      })\n      .catch(console.error);\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   *\n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   *\n   * catch: error to console.error\n   *\n   * finally: call setIsLoading, set it to false\n   */\n  return (\n    <form\n      id=\"search\"\n      onSubmit={async (event) => {\n        event.preventDefault();\n        setIsLoading(true);\n        try {\n          const results = await fetchQueryResults({\n            century,\n            classification,\n            queryString,\n          });\n          console.log(results, \"results\");\n          setSearchResults(results);\n        } catch (error) {\n          // console.error;\n        } finally {\n          setIsLoading(false);\n        }\n        // write code here\n      }}\n    >\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input\n          id=\"keywords\"\n          type=\"text\"\n          placeholder=\"enter keywords...\"\n          value={queryString}\n          onChange={(e) => {\n            setQueryString(e.target.value);\n          }}\n        />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">\n          Classification{\" \"}\n          <span className=\"classification-count\">\n            ({classificationList.length})\n          </span>\n        </label>\n        <select\n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification}\n          onChange={(e) => {\n            setClassification(e.target.value);\n          }}\n        >\n          <option value=\"any\">Any</option>\n          {classificationList.map((list) => {\n            return (\n              <option key={list.id} value={list.name}>\n                {list.name}\n              </option>\n            );\n          })}\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">\n          Century <span className=\"century-count\">({centuryList.length})</span>\n        </label>\n        <select\n          name=\"century\"\n          id=\"select-century\"\n          value={century}\n          onChange={(e) => {\n            setCentury(e.target.value);\n          }}\n        >\n          <option value=\"any\">Any</option>\n          {centuryList.map((century) => {\n            return (\n              <option key={century.id} value={century.name}>\n                {century.name}\n              </option>\n            );\n          })}\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\nconst Title = () => {\n  return (\n    <div>\n      <h1>The Art Collector</h1>\n      <h5>Search the Harvard Art Museums' Private Collections</h5>\n    </div>\n  );\n};\n\nexport default Title;\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n *\n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title,\n} from \"./components\";\n\nconst App = () => {\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] });\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   *\n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n\n  return (\n    <div className=\"app\">\n      {/* <Title /> is static, doesn't need any props */}\n      <Title />\n      {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n      <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n      {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n      <Preview\n        searchResults={searchResults}\n        setIsLoading={setIsLoading}\n        setSearchResults={setSearchResults}\n        setFeaturedResult={setFeaturedResult}\n      />\n      {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n       <Feature  featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={searchResults} /> \n      {/* <Loading /> is static, but should only render when isLoading is true */}\n      {isLoading ? <Loading /> : null}\n      {/* use a ternary and render null if isLoading is false */}\n    </div>\n  );\n};\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n"],"sourceRoot":""}